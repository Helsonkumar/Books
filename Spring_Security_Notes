Spring Security : 22-07-2020
=================================

netstat -ano | findstr :8080
taskkill /PID 23508 /F

handled with lots of pre configured filteres.

Delegate Filter proxy ==> Filetr-chain proxy ==> Filter chain (We have list of them)

Authentication process:
Principal : Is the User or the FID which needs access to a resosurce.
Authentication Manager : Does all authentication steps.
Creates an authentication object and adds the prinicpal and Authorization object to the Security-Context object and futher adds that to HttpSession.

Principal + Authorization ==> Authentication Object  ==> Security-Context ==> Session

Security-Context object is created when the user tries access the resource.

We have form-based, basic, Digest , types of authentication.


CSRF : Cross Site Request Forgerry





OAuth2.0 :
=========================
Protocol to let User to permit a client(like Quora) to access resource from another site(like Google) with limited Authorization or Access without exposing the complete credentials to Clinet(Quora).
In other words, to let another client to access your resource without exposing your credentials to that cleint.

In simple terms  : OAuth is meant ofr Authorization and not for Authentication.
it is a protocol to allow 2 service  in a network to trust each other and work.

E.q  : valet parking key with limited access


Grant Types Under OAuth:
-------------------------
1. Authorization Code Grant
2. Client Credentials Grant 
3. Resource Owner Password Grant
4. Implicit Grant


Authorization Code Grant : 
-----------------------------
Consider the example of Quora with Google Login

Quora is registered client with Google. o Quora has Client Id and Client Secret

Parties involved  : Resource + Resource Owner (user)   +  Resource Server (Google server) +  Client (App which makes request to protected resource on behalf of Resource owner) + Auth Server(Google Auth Server)

The Resource server must implement or coupled with the Auth.Server. Bcz Res.Server must ensure security.

1. Quora ask for Login with Google (Auth Server)
2. It(Auth server) redirects to google login page
3. User types the Uid and Pwd.
   Google asks for Users concent for the scopes granted to the quora client. User decides yes or no for that.
4. Google AUTH Server grants quora with """AUTH-CODE""" with  the redirect link
5. Quora request for Access token, so it submits the AUth code + client id and client credentials to auth server. Then quora submits that to Resource server.
6. Resource server validates the Access token for the actual resource sought and serves the requested resource.
7. Quora access the user profile details from google resource server.

Access Token  : Must be in a format which cannot be tampered. This is Called JWT (Java Web Token)



Client Credentials Token :
-------------------------------
Used for interaction between apps to apps.
E.q Helson-app trying to access service exposed by Book-my-show app.
Here  there is nothing like resource owner. Bcz the resource is not owned by any end user. Instead the theatre seat reservation details are owned by Book-my-show system
For REST-APi to REST-APi interaction we use Client-Credentials-grant type. Since the parties involved are highly trusted. So use that for inter service comm. No external world contact.
Helson app must be a valid an resgistered app with Book my show system .
Helson-app gets the access token from book-my-show app(Auth Server) by providing it Client-ID and Secret.



Resource Owner Pwd grant type:
---------------------------------
Think of End user trying to access his user details from an app. The resource owner is the end user here.
By providing the Uid and Pwd to the app, the app inturn interacts with the Auth server with the given Uid and Pwd alone .
So the auth sever grants the client app the auth token to access the user details.



Implicit Grant :
----------------------------------
Used mostly by the Java Script apps.
Similar to Auth-code-grant type , but no Auth-token concept exists.
The auth-server directly send the Access-token to the client.



JWt : Java Web Token:
-------------------------
U all know the HTTP is stateless.
So to remember the user session we use session-id with Cookies from browser.
This works well if the app is monolith.
However for modern we apps where we have LB infront and the nodes would not remeber the session id of the previous interaction.We have solution like distributed cache which can hold the session detailswhich can further be read by all nodes to serve user request.
But this is not a roboust solution. So we have JWT for us.

Instead of sending the user with the reference of the seesion in the form of session-id , how about sending the user with the details of the session itself in a secured form with A SIGNATURE MARK?
Think of receptionist sending the problem details instead of call reference.
The next time the receptionist simply need to validate the signature in the token and serve the user request based on the details in the JWT.
This is called as Java Web token.
*******Time Bound Delegated Access***********.


The modern or the recommended way to secure an API system is to Design as follows:
1. Client interacts with OIDC server to get the Identity Token and exchange the same for an Access token with the Oauth Server.
2. Then it handovers the access token(JWT token) (which is delegated with the level of access or authorization which an usr is eligible and Time limited)
3. Each services simply needed to evaluate the token with the signature and serve the request.(Th
4. Here the services do not have to check the token with the Auth Server for the validity of the token due to which the Auth Servers are not overloaded and the latency due to them is reduced.
5. This is called the *****Zero Trust Model***** where the Authentication of each user request is checked for every time.


Best Practise for Securing Your APIs.:
-------------------------------------------
Google Cloud uses Apigee (accquired by google)
We get developer portal + API operational metrics for visisbility of API usuage + API services

API Threats:
------------------
1. Software Bugs     : Do security test, Find the vulnerabilities using sonar lint,etc. Understatnd the change management process and check who is making the changes to your API.

2. Injection Threats : SQL injection , Cross Site Scripting. 
                       Do input validation as the primary line of defence.
					   Using Swagger seps for proper input and Output specification.
					   Using Regex for input validation.
					   
3. Denial Of service : Service availability issues:
                       Scale out the app when the attacker traffic goes up. Check when such DOS would happen.
					   using robust Google Load balancer.
					   Cache response for frequent request
					   Levearge Security Policies.
					   Apigee offers  : Cache + Resource Quota(to restrict consumption based on users) + API Rate Limit
			
Use IAM service .
use **Zero thrust model" as described above.
Make sure the user exp is stays consistent.

We use """Developer Portals"" to make the API consumer self-served.
In APigee Security dashBoard we integrate the Developer Portal to identify the API key or client trying to register.


4. Insider Threats: 
Commonly overlooked.
Exposing lot of data to insiders.
Tract or Audit user activity with the APi using SSO,etc


5.Change Management:
Apigee gives holistic view of the changes happening to ur API and Infra.


6. Spam and Abuse : Content Scrap, abuse,etc
   Use ***Google Armour to idetify te metadata around your APi request.
   Captcha to prevent the automated Bots to overwhelmed the API system.
   
   


					   