How to exclude all local commits and add only the latest commit to remote repo from local repo:
----------------------------------------------------------------------------------------------------

git reset --soft/--hard/--mixed(default) origin/master 
(soft : preseves ur changes , but resets the commit , But chages would remian in Index(staged)==> make the remote repo to look less noisy)
(hard : removes ur local changes and resets ur commit, Changes would be unstaged ==> you will loose your changes in local after reset)


To remove one of the file or folder which has been staged :
-------------------------------------------------------------
git reset HEAD -- file/folder_name 



git checkout branch_name
(remotes/origin/branch_name)
Note  : dont use "git checkout -b branch"  (This would simply create a new copy of the current branch with the name given)




git rebase  :
-------------------
One of the utilities used for merging changes from 2 diff branches.
Not adviced to use

master  : m1,m2   -----> m3
feature: m1,m2,f1------------> f2
5502 15 nviia 700000 512 3501 15 11 8 1t 256gb nvidia 
f2 commited after m3

feature branch  >> git merger --squah master
This would collated all the changes in feature into one commit and apply on top of master's latest commit
m1,m2,m3,(f1,f2)
but this is not easy to track changes.

feature branch >> git rebase master
gti checks for the latest common commit between 2 branch.
Saves all changes in feature and apply on top of the changes applied to master post the common commit(m2)

m1,m2,m3,f1,f2 ==> easily trackable

The primary reason for rebasing is to maintain a linear project history. 
The benefits of having a clean history become tangible when performing Git operations to investigate the introduction of a regression




To time travel : To find the changes made in the last n - unit of time
-------------------------------------------------------------------------
git diff master@{0} master@{11.day.ago}
This example is very useful if you want to know changes that have occurred within a time frame.


printing logs of commimt:
--------------------------------
git log --pretty ---oneline


Cloning vs Forking  :
=========================
Forking  : Orginla Repo  => fork  => get a copy of that state in your github acct => (A conn exists between ur github copy and originla repo)
==> it copies all includiing pull request, commits,etc==> U can clone the forked copy of urs in local machine==> make changes  ==> push changes to ur forked copy ==> create pull request to the originla repo 
Great for Open source contribution

Clone  : Just clone it  originla repo  ==. no conn existing betwen your clone copy in local machine and the original repo  => 






git diff :
---------------
git diff on pwd gives the diff f changes made so far compared to the HEAD

git diff file.txt --> compares that fie alone

git diff --cached file.txt --> compares the changes in the files to the one which is staged.

By default git diff will show you any uncommitted changes since the last commit.

git diff branch1...other-feature-branch --> compares the branches...note for the ... dot operator

git diff master new_branch ./diff_test.txt --> compares file from 2 diff branches

git diff @{upstream} --> Compares the current branch HEAD with the one in the local remote repo reference  (remote/origin). Helps to find the diff between current and remote post fetch







Denotions:
----------------------------
HEAD -> master ==> current pos in local repo
Using which we can track how far we are ahead of remote

origin/master , origin/HEAD (denotes ur pos in remote repo)



Undo a commit :
----------------------------
git revert  <<commit-hash>>


Rename a remote branch  :
----------------------------
We cannot rename it directly

clone the remote project

create a copy of the branch to be enamed with the correct name locally : 
git branch -m oldname newname

delete the old branch in remote and local  : 
git push origin --delete old_branch_name

push the new branch to remote  : 
git push origin new_branch_name



Clone a project from another repo  : Create a new repo : push that cloned project to the new repo
========================================================================================================
git remote add origin https://github.com/Helsonkumar/spark-on-k8s-gcp-examples.git
git push https://github.com/Helsonkumar/spark-on-k8s-gcp-examples.git master





Maven  :
==============
When Ur maven dependecy has its own dependecny then that becomes the transitive dependency for U.

ClassDefNotFound , MethodNotFound , NoSuchMethod found  : Symptoms of Dependcy issues

maven Dependency Conflicts  :
---------------------------------
Always define the scope of ur depedency. So it does not become unnecessary transitive dependcy for Ur lib user.ie. <scope>test<scope>

mvn dependency:tree -Dverbose -Dincludes=com.google.guava:guava

Imagine When 2 Dependency has transitive dependency of the same jar but of diff version. 
A needs version 10
B needs version 8

When version 8 and 10 are not compatible then if version 10 is in the classpath first, then that would be utilized by B (which depends on version 8), but since version 10 is not backward compatible, we may get such errors like NoMethodDefinedFound, etc

So ideally use same version(newest)  for all ur Dependencies  : Use Enforcer plugin to achiev this : mvn verify ==> tghis would tell if there is any dep conflicts in our POM file.

Use <exclusions></exclusions>  : To exclude conflicting dependencies

<DependencyManagement></DependencyManagement> : 
----------------------------------------------------
So inorder to enforce all dependecny(inlcuding transitive) are of same version newest or older, we use dep.mgmt : when maven comeacross a Dependency it would simply check if there is a mention in Dep.mgmt tag for that jar.
Then it would simply overwrite that jar for all conflicting versions.

Shade + Relocation  :

BOM file for multi module project  : Enforces that the modules under the multi module project must all have the same version.


Shading in Maven  :
========================
Imagine the below scenario  :

Lib X  ==> Depends on Lib A  + B

Lib A  --> Depends on Z.v2
Lib B  --> Depends on Z.v1

So in class path we would end up with both classes of the same package structure and with the same name.
But they both are  not backward compatible.
So if V2 lies first in the classpath, then Lib B would take Z.v2 for its need which may not be backward compatible.
So this  would break Lib B. The classes with the same name and package structure laying in the classpath is called SHADING.

So we need to instruct the lin devlopers to rename the artifacts and rename the packages or move to diff packages for every release(if it is not backward compatible)
So we can use the respective reference of those new packages in our code.
but lib delopers would not be asked to do it. We have plugins which can be used at client site, so the conflicting libs abd its transitive dependices would be auto renamed to new package with the prefix as the project title.
And the reference of those packages in the code base would be updated with the new package reference by the plugin itself.
The transitive dependencies would be directly included in our code client code base intead of treating that as dependency.

So this can help us avoid Dependency conflicts and Shading classes.


