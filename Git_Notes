How to exclude all local commits and add only the latest commit to remote repo from local repo:
----------------------------------------------------------------------------------------------------
git reset --soft/--hard origin/master 
(soft : preseves ur changes , but resets the commit ==> make the remote repo to look less noisy)
(hard : removes ur local changes and resets ur commit ==> you will loose your changes in local after reset)


git checkout branch_name
(remotes/origin/branch_name)
Note  : dont use "git checkout -b branch"  (This owould simply create a new copy of the current branch with the anem given)




git rebase  :
-------------------
One of the utilities used for merging changes from 2 diff branches.
Not adviced to use

master  : m1,m2   -----> m3
feature: m1,m2,f1------------> f2

f2 commited after m3

feature branch  >> git merger --squah master
This would collated all the changes in feature into one commit and apply on top of master's latest commit
m1,m2,m3,(f1,f2)
but this is not easy to track changes.

feature branch >> git rebase master
gti checks for the latest common commit between 2 branch.
Saves all changes in feature and apply on top of the changes applied to master post the common commit(m2)

m1,m2,m3,f1,f2 ==> easily trackable

The primary reason for rebasing is to maintain a linear project history. 
The benefits of having a clean history become tangible when performing Git operations to investigate the introduction of a regression




To time travel : To find the changes made in the last n - unit of time
-------------------------------------------------------------------------
git diff master@{0} master@{11.day.ago}
This example is very useful if you want to know changes that have occurred within a time frame.


printing logs of commimt:
--------------------------------
git log --pretty ---oneline



git diff :
---------------
git diff on pwd gives the diff f changes made so far compared to the HEAD

git diff file.txt --> compares that fie alone

git diff --cached file.txt --> compares the changes in the files to the one which is staged.

By default git diff will show you any uncommitted changes since the last commit.

git diff branch1...other-feature-branch --> compares the branches...note for the ... dot operator

git diff master new_branch ./diff_test.txt --> compares file from 2 diff branches






Denotions:
----------------------------
HEAD -> master ==> current pos in local repo
Using which we can track how far we are ahead of remote

origin/master , origin/HEAD (denotes ur pos in remote repo)



Undo a commit :
----------------------------
git revert  <<commit-hash>>


Rename a remote branch  :
----------------------------
We cannot rename it directly

clone the remote project

create a copy of the branch to be enamed with the correct name locally : 
git branch -m oldname newname

delete the old branch in remote and local  : 
git push origin --delete old_branch_name

push the new branch to remote  : 
git push origin new_branch_name



Clone a project from another repo  : Create a new repo : push that cloned project to the new repo
========================================================================================================
git remote add origin https://github.com/Helsonkumar/spark-on-k8s-gcp-examples.git
git push https://github.com/Helsonkumar/spark-on-k8s-gcp-examples.git master




