Microservices and Spring Boot Training:
===========================================
Resfu1.
Small well choosen deployable unit.
Cloud enabled.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Do check out the debugging notes given in the training session.

https://github.com/in28minutes/in28minutes-initiatives/tree/master/The-in28Minutes-TroubleshootingGuide-And-FAQ#debugging-problems-with-feign-and-ribbon


API Design interview preparation:
--------------------------------------
https://tonyxu.io/posts/2018/rest-api-design-interview-preparation/
https://www.linkedin.com/pulse/api-design-interview-preparation-tai-chia-makris-huang/
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Challenges in building M/S:
===========================================
1. Business Boundries : Decide the right boundries for each microservices. But in reality the boundaries are evolutionary over the period of time.
2. Config management  : We have mutiple instance of the service in many env. So there exist an opearational challenges in the config management of theses services.
3. Elastic            : Dynamic Scale Up and Scale down .Make this system so elastic and scale up and scal down whenever needed using dynamic Load Balancing.
4. Visiblity          : Debugging is difficult in microservice.Trace back the miscroservice whihc caused the problem by using their logs
5. Pack of Cards      : High Availablity 


Spring Cloud :
===========================================
Spring config server : Config of many ms are served via  : Sring Configuration server: Here we store the config for all services in one place(GIT).
Elastic feature      : Naming server (Eureka). as servcie registry . Ribbon Load Balancing(Naming Server) for clinet side LB.  
Visibility           : ZipKin Dist tracing . Netflix Api gateway (Zuul) . THis gateway host the common feature of the each service like analytics, etc.
HA                   : Histrix(repsonds the client with default response when the service is unavailable)


M/S Advantages:
===========================================
New tech and process adaption. Diff langauae for diff servcies.
Dynamic Scaling  : Elastic
faster Release cycle : faster to world of new features.


Centarlized Config Server:
=============================================
Each Service would have diff env => Each env could have more that one instance.
We need the config info for these instance seamlessly.



Spring Cloud microservice:
====================================
If we wnat to change the port in whihc the service runs then we need to set the port via the -Dserver.port JVM argument under the run configuration of the instance by creating a duplicate of the original instance.



Feign:
======================================
Feign solves invoking other M/S with lesser code . Fiegn is from Netflix.


Ribbon:
==========================================
Used to auto laod balancing at the clinet side.
The request from client end is distributed among the available instances in the eureka server registry.


Eureka Naming server:
==============================================
Used fo auto scaling and for elasticity.This is used for service registry and service discovery.


API Gateway:
================================================
Holds the common feature applicable for all M/S
1. Authentication and security
2. Rate limits 
3. Auditing of call limits
4. fault tolerance
5. Service aggregation

Zuul: Netflix used to create a API Gateway



Distributed Tracing:
=============================
This is the most important one. We need a single centralized location where i can see the complete chain of the request.
Idea is to assign a unique ID for a request and trace back.
We use ""Spring Cloud Sleuth""" : Zippkin

**** Check for the solution available for Distributed tracing service : Like ELK, Kafka , Rabbit MQ

Typically  : Services write their log to => Queue => Zippkin Dist Tracing Server => Database

Zipkin is luanched from command line using its jar. It is not a server.

To refersh an Application while it is running : """localhost:port/actuator/refresh"""
But when the number of instance is large then we will have to manualy refresh each instance which is painful.

So we use """Spring Cloud Bus""" to do this refresh for us.

Spring Cloud Bus is just a messgae queue like Kafka or Rabbit MQ.
Once an instance is started, it simply register's itself with the Spring Cloud Bus.
So we its enoguh if we simply run the below command which signifies that if any one instance is refreshed , then all other instances would be too refreshed.

"""localhost:port/actuator/bus-refresh""" ==> This would refresh all instances at once.



Fault tolerance with M/S:
=========================================
To respond the client with a graceful response we use ""Hystrix""
We execute a fallback method when a service call fails.


